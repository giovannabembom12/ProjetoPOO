package com.model.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

public class AluguelDAO {

    public static void btnAddItemActionPerformed(java.awt.event.ActionEvent evt, double total, JTable tblServico,
            javax.swing.JTextField txtCodigoServico, javax.swing.JTextField txtNomeServico,
            javax.swing.JTextField txtQuantidade, javax.swing.JTextField txtValorUnit, javax.swing.JTextField txtTotal) {
        int quantidade = Integer.parseInt(txtQuantidade.getText());
        double valorUtilitario = Double.parseDouble(txtValorUnit.getText());
        double subTotal = quantidade * valorUtilitario;
        total += subTotal;
        txtTotal.setText(String.valueOf(total));

        DefaultTableModel carrinho = (DefaultTableModel) tblServico.getModel();

        carrinho.addRow(new Object[] { txtCodigoServico.getText(), txtNomeServico.getText(),
                txtQuantidade.getText(), txtValorUnit.getText(), subTotal });

        limparCamposServico(txtCodigoServico, txtNomeServico, txtQuantidade, txtValorUnit);
    }

    public static void btnBuscarServicoActionPerformed(java.awt.event.ActionEvent evt,
            javax.swing.JTextField txtCodigoServico, javax.swing.JTextField txtNomeServico,
            javax.swing.JTextField txtValorUnit, JTable tblServico) {
        String codigoServico = txtCodigoServico.getText();

        if (!codigoServico.isEmpty()) {
            Servico servico = buscarServicoNoBanco(codigoServico);

            if (servico != null) {
                txtNomeServico.setText(servico.getNomeServico());
                txtValorUnit.setText(Double.toString(servico.getValorUnit()));
            } else {
                JOptionPane.showMessageDialog(null, "Serviço não encontrado no banco de dados", "Erro",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Campo Código do Serviço está vazio", "Erro",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void btnEditarActionPerformed(java.awt.event.ActionEvent evt, JTable tblServico,
            javax.swing.JTextField txtCodigoServico, javax.swing.JTextField txtNomeServico,
            javax.swing.JTextField txtQuantidade, javax.swing.JTextField txtValorUnit, double total,
            javax.swing.JTextField txtTotal) {
        editarItem(tblServico, txtCodigoServico, txtNomeServico, txtQuantidade, txtValorUnit);
        atualizarTotal(tblServico, txtTotal);
    }

    public static void btnSalvarAltActionPerformed(java.awt.event.ActionEvent evt, JTable tblServico,
            javax.swing.JTextField txtCodigoServico, javax.swing.JTextField txtNomeServico,
            javax.swing.JTextField txtQuantidade, javax.swing.JTextField txtValorUnit, double total,
            javax.swing.JTextField txtTotal) {
        salvarAlteracoes(tblServico, txtCodigoServico, txtNomeServico, txtQuantidade, txtValorUnit, total,
                txtTotal);
    }

    public static void btnExcluirActionPerformed(java.awt.event.ActionEvent evt, JTable tblServico, double total,
            javax.swing.JTextField txtTotal) {
        excluirItem(tblServico, total, txtTotal);
    }

    public static void btnSalvarActionPerformed(java.awt.event.ActionEvent evt, javax.swing.JTextField txtCodigoEvento,
            JTable tblServico) {
        int idevento = 0;

        try {
            idevento = Integer.parseInt(txtCodigoEvento.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "É necessário associar um evento aos serviços antes de salvar.",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tblServico.getModel();
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Adicione pelo menos um serviço antes de salvar.", "Aviso",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        for (int i = 0; i < model.getRowCount(); i++) {
            String codigoServico = (String) model.getValueAt(i, 0);
            String nomeServico = (String) model.getValueAt(i, 1);
            int quantidade = Integer.parseInt((String) model.getValueAt(i, 2));
            double valorUnitario = Double.parseDouble((String) model.getValueAt(i, 3));
            double subtotal = Double.parseDouble(model.getValueAt(i, 4).toString());

            inserirItemAluguel(idevento, codigoServico, nomeServico, quantidade, valorUnitario, subtotal);
        }

        JOptionPane.showMessageDialog(null, "Itens de aluguel salvos no banco de dados com sucesso!", "Confirmação",
                JOptionPane.INFORMATION_MESSAGE);
    }

    public static void limparCamposServico(javax.swing.JTextField txtCodigoServico,
            javax.swing.JTextField txtNomeServico, javax.swing.JTextField txtQuantidade,
            javax.swing.JTextField txtValorUnit) {
        txtCodigoServico.setText("");
        txtNomeServico.setText("");
        txtQuantidade.setText("");
        txtValorUnit.setText("");
    }

    public static Servico buscarServicoNoBanco(String codigoServico) {
        Servico servico = null;
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DriverManager.getConnection("jdbc:mysql://localhost/tasktide", "root", "root");
            String sql = "SELECT nome, valorUnit FROM tbproduto WHERE codigo = ?";
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, codigoServico);
            rs = stmt.executeQuery();
            if (rs.next()) {
                String nomeServico = rs.getString("nome");
                double valorUnit = rs.getDouble("valorUnit");
                servico = new Servico(nomeServico, valorUnit);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
        }
        return servico;
    }

    public static void editarItem(JTable tblServico, javax.swing.JTextField txtCodigoServico,
            javax.swing.JTextField txtNomeServico, javax.swing.JTextField txtQuantidade,
            javax.swing.JTextField txtValorUnit) {
        int selectedRow = tblServico.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Por favor, selecione um item para editar.", "Aviso",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tblServico.getModel();

        txtCodigoServico.setText((String) model.getValueAt(selectedRow, 0));
        txtNomeServico.setText((String) model.getValueAt(selectedRow, 1));
        txtQuantidade.setText((String) model.getValueAt(selectedRow, 2));
        txtValorUnit.setText((String) model.getValueAt(selectedRow, 3));

        habilitarEdicaoCamposServico(txtCodigoServico, txtNomeServico, txtQuantidade, txtValorUnit);
    }

    public static void habilitarEdicaoCamposServico(javax.swing.JTextField txtCodigoServico,
            javax.swing.JTextField txtNomeServico, javax.swing.JTextField txtQuantidade,
            javax.swing.JTextField txtValorUnit) {
        txtCodigoServico.setEditable(false);
        txtNomeServico.setEditable(true);
        txtQuantidade.setEditable(true);
        txtValorUnit.setEditable(true);
    }

    public static void salvarAlteracoes(JTable tblServico, javax.swing.JTextField txtCodigoServico,
            javax.swing.JTextField txtNomeServico, javax.swing.JTextField txtQuantidade,
            javax.swing.JTextField txtValorUnit, double total, javax.swing.JTextField txtTotal) {
        int selectedRow = tblServico.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Por favor, selecione um item para editar.", "Aviso",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirmacao = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja salvar as alterações?",
                "Confirmação", JOptionPane.YES_NO_OPTION);
        if (confirmacao != JOptionPane.YES_OPTION) {
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tblServico.getModel();

        model.setValueAt(txtNomeServico.getText(), selectedRow, 1);
        model.setValueAt(txtQuantidade.getText(), selectedRow, 2);
        model.setValueAt(txtValorUnit.getText(), selectedRow, 3);

        int quantidade = Integer.parseInt(txtQuantidade.getText());
        double valorUnitario = Double.parseDouble(txtValorUnit.getText());
        double subtotal = quantidade * valorUnitario;
        model.setValueAt(subtotal, selectedRow, 4);

        desabilitarEdicaoCamposServico(txtCodigoServico, txtNomeServico, txtQuantidade, txtValorUnit);
        limparCamposServico(txtCodigoServico, txtNomeServico, txtQuantidade, txtValorUnit);
        atualizarTotal(tblServico, txtTotal);
    }

    public static void desabilitarEdicaoCamposServico(javax.swing.JTextField txtCodigoServico,
            javax.swing.JTextField txtNomeServico, javax.swing.JTextField txtQuantidade,
            javax.swing.JTextField txtValorUnit) {
        txtCodigoServico.setEditable(false);
        txtNomeServico.setEditable(false);
        txtQuantidade.setEditable(false);
        txtValorUnit.setEditable(false);
    }

    public static void atualizarTotal(JTable tblServico, javax.swing.JTextField txtTotal) {
        double novoTotal = 0.0;
        DefaultTableModel model = (DefaultTableModel) tblServico.getModel();

        for (int i = 0; i < model.getRowCount(); i++) {
            double subtotal = (double) model.getValueAt(i, 4);
            novoTotal += subtotal;
        }

        txtTotal.setText(String.valueOf(novoTotal));
    }

    public static void excluirItem(JTable tblServico, double total, javax.swing.JTextField txtTotal) {
        DefaultTableModel model = (DefaultTableModel) tblServico.getModel();

        int selectedRow = tblServico.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Selecione uma linha para excluir.", "Erro",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        double valorSubtraido = (double) model.getValueAt(selectedRow, 4);

        int choice = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja excluir esta linha?",
                "Confirmação", JOptionPane.YES_NO_OPTION);

        if (choice == JOptionPane.YES_OPTION) {
            model.removeRow(selectedRow);

            total -= valorSubtraido;
            txtTotal.setText(String.valueOf(total));
        }
    }

    public static void inserirItemAluguel(int idevento, String codigoServico, String nomeServico,
            int quantidade, double valorUnitario, double subtotal) {
        String url = "jdbc:mysql://localhost:3306/tasktide";
        String usuario = "root";
        String senha = "root";

        try (Connection conexao = DriverManager.getConnection(url, usuario, senha)) {
            String query = "INSERT INTO aluguel_servicos (idevento, codigo_servico, nome_servico, quantidade, valor_unitario, subtotal) VALUES (?, ?, ?, ?, ?, ?)";
            try (PreparedStatement pst = conexao.prepareStatement(query)) {
                pst.setInt(1, idevento);
                pst.setString(2, codigoServico);
                pst.setString(3, nomeServico);
                pst.setInt(4, quantidade);
                pst.setDouble(5, valorUnitario);
                pst.setDouble(6, subtotal);
                pst.executeUpdate();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao salvar item de aluguel.", "Erro",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    public static class Servico {
    	public String nomeServico;
    	public double valorUnit;

        public Servico(String nomeServico, double valorUnit) {
            this.nomeServico = nomeServico;
            this.valorUnit = valorUnit;
        }

        public String getNomeServico() {
            return nomeServico;
        }

        public double getValorUnit() {
            return valorUnit;
        }
    }
}
